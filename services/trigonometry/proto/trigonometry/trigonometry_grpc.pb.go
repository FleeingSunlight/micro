// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package trigonometry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TrigonometryServiceClient is the client API for TrigonometryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrigonometryServiceClient interface {
	Sin(ctx context.Context, in *TrigonometryReq, opts ...grpc.CallOption) (*TrigonometryRes, error)
	Cos(ctx context.Context, in *TrigonometryReq, opts ...grpc.CallOption) (*TrigonometryRes, error)
	Tan(ctx context.Context, in *TrigonometryReq, opts ...grpc.CallOption) (*TrigonometryRes, error)
}

type trigonometryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrigonometryServiceClient(cc grpc.ClientConnInterface) TrigonometryServiceClient {
	return &trigonometryServiceClient{cc}
}

func (c *trigonometryServiceClient) Sin(ctx context.Context, in *TrigonometryReq, opts ...grpc.CallOption) (*TrigonometryRes, error) {
	out := new(TrigonometryRes)
	err := c.cc.Invoke(ctx, "/trigonometry.TrigonometryService/Sin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trigonometryServiceClient) Cos(ctx context.Context, in *TrigonometryReq, opts ...grpc.CallOption) (*TrigonometryRes, error) {
	out := new(TrigonometryRes)
	err := c.cc.Invoke(ctx, "/trigonometry.TrigonometryService/Cos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trigonometryServiceClient) Tan(ctx context.Context, in *TrigonometryReq, opts ...grpc.CallOption) (*TrigonometryRes, error) {
	out := new(TrigonometryRes)
	err := c.cc.Invoke(ctx, "/trigonometry.TrigonometryService/Tan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrigonometryServiceServer is the server API for TrigonometryService service.
// All implementations must embed UnimplementedTrigonometryServiceServer
// for forward compatibility
type TrigonometryServiceServer interface {
	Sin(context.Context, *TrigonometryReq) (*TrigonometryRes, error)
	Cos(context.Context, *TrigonometryReq) (*TrigonometryRes, error)
	Tan(context.Context, *TrigonometryReq) (*TrigonometryRes, error)
	mustEmbedUnimplementedTrigonometryServiceServer()
}

// UnimplementedTrigonometryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrigonometryServiceServer struct {
}

func (UnimplementedTrigonometryServiceServer) Sin(context.Context, *TrigonometryReq) (*TrigonometryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sin not implemented")
}
func (UnimplementedTrigonometryServiceServer) Cos(context.Context, *TrigonometryReq) (*TrigonometryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cos not implemented")
}
func (UnimplementedTrigonometryServiceServer) Tan(context.Context, *TrigonometryReq) (*TrigonometryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tan not implemented")
}
func (UnimplementedTrigonometryServiceServer) mustEmbedUnimplementedTrigonometryServiceServer() {}

// UnsafeTrigonometryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrigonometryServiceServer will
// result in compilation errors.
type UnsafeTrigonometryServiceServer interface {
	mustEmbedUnimplementedTrigonometryServiceServer()
}

func RegisterTrigonometryServiceServer(s grpc.ServiceRegistrar, srv TrigonometryServiceServer) {
	s.RegisterService(&_TrigonometryService_serviceDesc, srv)
}

func _TrigonometryService_Sin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrigonometryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrigonometryServiceServer).Sin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trigonometry.TrigonometryService/Sin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrigonometryServiceServer).Sin(ctx, req.(*TrigonometryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrigonometryService_Cos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrigonometryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrigonometryServiceServer).Cos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trigonometry.TrigonometryService/Cos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrigonometryServiceServer).Cos(ctx, req.(*TrigonometryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrigonometryService_Tan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrigonometryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrigonometryServiceServer).Tan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trigonometry.TrigonometryService/Tan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrigonometryServiceServer).Tan(ctx, req.(*TrigonometryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrigonometryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trigonometry.TrigonometryService",
	HandlerType: (*TrigonometryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sin",
			Handler:    _TrigonometryService_Sin_Handler,
		},
		{
			MethodName: "Cos",
			Handler:    _TrigonometryService_Cos_Handler,
		},
		{
			MethodName: "Tan",
			Handler:    _TrigonometryService_Tan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/trigonometry/trigonometry.proto",
}
